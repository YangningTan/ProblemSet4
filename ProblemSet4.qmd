---
title: "ProblemSet4"
author: "Yangning Tan"
format: html
editor: visual
---

## Problem 1 - Tidyverse

```{r}
# install package
library(nycflights13)
library(tidyverse)
```

a.  Generate a table (which can just be a nicely printed tibble) reporting the mean and median departure delay per airport. Generate a second table (which again can be a nicely printed tibble) reporting the mean and median arrival delay per airport. Exclude any destination with under 10 flights. Do this exclusion through code, not manually.

    Additionally,

    -   Order both tables in descending mean delay.

    -   Both tables should use the airport *names* not the airport *codes*.

    -   Both tables should print all rows.

    ```{r}
    # mean and median of departure delay
    tb_flights <- nycflights13::flights

    tb_flights %>% 
      left_join(nycflights13::airports, by = c("origin" = "faa")) %>% 
      select(name, dep_delay) %>% 
      group_by(name) %>% 
      summarise(dep_delay_mean = mean(dep_delay, na.rm = TRUE),
                dep_delay_median = median(dep_delay, na.rm = TRUE)) %>% 
      arrange(desc(dep_delay_mean))
    ```

    ```{r}
    # mean and median of arrival delay
    tb_flights %>%
      #left_join(nycflights13::airports, by = c("dest" = "faa")) %>%
      group_by(dest) %>%
      filter(n() >= 10) %>%
      ungroup() %>% 
      select(dest, arr_delay) %>%
      group_by(dest) %>%
      summarise(arr_delay_mean = mean(arr_delay, na.rm = TRUE),
                arr_delay_median = median(arr_delay, na.rm = TRUE)) %>% 
      left_join(nycflights13::airports, by = c("dest" = "faa")) %>%
      select(name, arr_delay_mean, arr_delay_median) %>% 
      arrange(desc(arr_delay_mean))
    ```

b.  How many flights did the aircraft model with the fastest average speed take? Produce a tibble with 1 row, and entires for the model, average speed (in MPH) and number of flights.

    We first create a tibble of the planes.

    ```{r}
    tb_planes <- nycflights13::planes
    ```

    We need to get the average speed of each aircraft. To do this, we join the tibble of flights and planes.

    ```{r}
    tb_flights %>% 
      left_join(tb_planes, by = c("tailnum" = "tailnum")) %>% 
      select(model, distance, air_time) %>% 
      group_by(model) %>% 
      summarise(total_distance = sum(distance, na.rm = TRUE),
                total_time = sum(air_time, na.rm = TRUE) / 60,
                average_speed = total_distance / total_time,
                number_of_flights = n()) %>% 
      ungroup() -> average_speed
    ```

    Then, we can find out the model of plane with the fastest average speed.

    ```{r}
    average_speed %>% 
      filter(average_speed == max(average_speed)) %>% 
      select(model, average_speed, number_of_flights) -> fastest_model
    fastest_model
    ```

## Problem 2

Load the Chicago NNMAPS data we used in the visualization lectures. Write a function `get_temp()` that allows a user to request the average temperature for a given month.

We first import the data.

```{r}
nnmaps <- read.csv("/Users/tyn/Documents/R/chicago-nmmaps.csv")
```

Then we write the function.

```{r}
get_temp <- function(month_input, year_input, data, celsius = FALSE, average_fn = mean){
  # check the validity of input year
  if (year_input < 1997 | year_input > 2000) {
    stop("Invalid input: Year should be between 1997 and 2000")
  }
  
  # convert all kinds of input of month into numeric form
  convert_month_to_numeric <- function(month_input) {
  month_mapping <- c("Jan" = 1, "Feb" = 2, "Mar" = 3, "Apr" = 4, "May" = 5, "Jun" = 6, "Jul" = 7, "Aug" = 8, "Sep" = 9, "Oct" = 10, "Nov" = 11, "Dec" = 12)
  
  if (is.numeric(month_input)) {
    # Check if the input is a numeric value between 1 and 12
    if (month_input >= 1 && month_input <= 12) {
      return(month_input)
    } else {
      stop("Invalid input: Numeric month should be between 1 and 12.")
    }
  } else if (is.character(month_input)) {
    # Check if the input is a valid month name or abbreviation
    formatted_input <- substr(month_input, 1, 3)
    if (formatted_input %in% names(month_mapping)) {
      return(month_mapping[formatted_input])
    } else {
      stop("Invalid input: Not a recognized month name or abbreviation.")
    }
  } else {
    stop("Invalid input: Input should be a numeric value, a valid month name, or a valid month abbreviation.")
    }
  }
  month_input <- convert_month_to_numeric(month_input)
  
  # filter the data
  filtered_data <- data %>%
    select(temp, year, month_numeric) %>% 
    group_by(year, month_numeric) %>% 
    summarize(mean_temp = average_fn(temp)) %>% 
    ungroup() %>% 
    filter(year == year_input, month_numeric == month_input)
  
  average_temp <- filtered_data$mean_temp
  
  # transfer into celsius if necessary
  if (celsius) {
    average_temp <- (average_temp - 32) * 5/9
  }
    
  return(average_temp)
}
```

Finally, we check whether the code works.

```{r}
# valid input
get_temp("Apr", 1999, data = nnmaps)
get_temp("Apr", 1999, data = nnmaps, celsius = TRUE)
get_temp(10, 1998, data = nnmaps, average_fn = median)
get_temp("November", 1999, data =nnmaps, celsius = TRUE,
         average_fn = function(x) {
           x %>% sort -> x
           x[2:(length(x) - 1)] %>% mean %>% return
         })
```

If the input is valid, we can get a result. When the input is invalid, it can produce a reasonable error message.
